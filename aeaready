#!/bin/bash
os=$(uname)
apperror=0
version=1.1
#
# A few alternative looks
# CSSURL=https://gist.githubusercontent.com/ryangray/1882525/raw/2a6e53f645b960f0bed16d686ba3df36505f839f/buttondown.css
#set -e
#CSSURL=https://gist.githubusercontent.com/dashed/6714393/raw/ae966d9d0806eb1e24462d88082a0264438adc50/github-pandoc.css
CSSURL=https://raw.githubusercontent.com/AEADataEditor/editor-scripts/refs/heads/main/.aeaready.css
CSSLOCAL=.aeaready.css
LOGOLOCAL=.logo-aea-88x88.jpg
DOCKERIMG=aeadataeditor/html-to-pdf:latest
dockerbin=$(which docker1 2>/dev/null || which docker)
#pdfengine="--pdf-engine wkhtmltopdf"
#pdfengine=""
pdfengine="docker"
case $pdfengine in
   "")
      WKHTMLOPTS="-s Letter --disable-smart-shrinking --enable-local-file-access"
      ;;
   "docker")
      DOCKEROPTS=""
      ;;
   *)
      WKHTMLOPTS="-V margin-top=1in -V margin-left=1in -V margin-right=1in -V margin-bottom=1in"
      ;;
esac
# other stuff
ICPSRMSG="Details in the full report, which you will receive via ScholarOne shortly. Please provide your response to the items listed above via the openICPSR Project Communication log, specifying AEAREP-xxx. Other items in the report may need to be addressed via ScholarOne."
PANDOCOPTS="--fail-if-warnings -s"
template_app="template/REPLICATION_appendix.md"
appendix="generated/REPLICATION_appendix.md"

echo "$0 version $version"

# validating inputs
if [[ -z $1 ]]
then
	echo "Please add issue number"
	exit 2
fi
num=$1
shift
case $1 in
  a*|approve)
     preapprove="Approved. Ready to submit."
     decision=approve
     shift
     ;;
  p*|pre-approve)
     preapprove="Preapproved. Ready for approval."
     decision=pre-approve
     shift
     ;;
  *)
    echo "Please define approval status: [a]pproved or [p]reapproved"
    exit 2
    ;;
esac
nopdf=0
if [[ "$1" == "nopdf" ]]
then
   nopdf=1
   shift
fi

extramsg=$*

exit_on_error() {
    exit_code=$1
    exit_message=${@:2}
    if [ $exit_code -ne 0 ]; then
        >&2 echo "${exit_message}, exit code ${exit_code}."
        exit $exit_code
    fi
}

set -o history -o histexpand


case $os in
	    Linux)
          pythonbin=$(which python3)
          [[ -f $pythonbin ]] || pythonbin=$(which python)
          [[ -f $pythonbin ]] || apperror=1
		    pandoc=$(which pandoc)
          [[ -f $pandoc ]] || apperror=1
          if [[ "$pdfengine" == "" ]]
          then
            wkhtmltopdf=$(which wkhtmltopdf)
            [[ -f $wkhtmltopdf ]] || apperror=1
          elif [[ "$pdfengine" == "docker" ]]
          then
            [[ -f $dockerbin ]] || apperror=1
          fi
	       export QT_STYLE_OVERRIDE=fusion 
	       # get the CSS
          if [[ -f $(dirname $0)/$CSSLOCAL ]]
          then
            cp $(dirname $0)/$CSSLOCAL $CSSLOCAL
            else
            curl $CSSURL > $CSSLOCAL 
          fi
          # get the logo
          if [[ -f $(dirname $0)/$LOGOLOCAL ]]
          then
            cp $(dirname $0)/$LOGOLOCAL $LOGOLOCAL
          fi
	       
		    ;;
       Darwin)
            pythonbin=$(which python)
            [[ -f $pythonbin ]] || apperror=1
            # for MacOS, might want to install Rstudio (comes with pandoc) and replace the line above with the outcome of
            #   find /Applications -name pandoc -type f
            pandoc=/Applications/RStudio.app/Contents/MacOS/pandoc/pandoc
            # later versions have it bundled in the quarto directory
            [[ ! -f $pandoc ]] && pandoc=/Applications/RStudio.app/Contents/MacOS/quarto/bin/pandoc
            [[ ! -f $pandoc ]] && pandoc=/Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/pandoc
            [[ ! -f $pandoc ]] && pandoc=/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/pandoc
            # let's see if its there
            if [[ ! -f $pandoc ]]
            then
              echo "We suggest using pandoc from the RStudio install. Searching for a different one..."
              pandoc=$(find /Applications -name pandoc -type f)
            fi
            echo "Found pandoc at $pandoc"
	         # get the CSS
          if [[ -f $(dirname $0)/$CSSLOCAL ]]
          then
            cp $(dirname $0)/$CSSLOCAL $CSSLOCAL
            else
            curl $CSSURL > $CSSLOCAL 
          fi
          # get the logo
          if [[ -f $(dirname $0)/$LOGOLOCAL ]]
          then
            cp $(dirname $0)/$LOGOLOCAL $LOGOLOCAL
          fi
            ;;
	    *)
		    echo "Please review the script to define your OS"
            apperror=1
		    ;;
esac

# update the CSS

if [[ -f $CSSLOCAL ]]
then
   
   case $pdfengine in
      "")
         WKHTMLOPTS="$WKHTMLOPTS --user-style-sheet $CSSLOCAL"
         ;;
      "docker")
         # 
         PANDOCOPTS="$PANDOCOPTS --css $CSSLOCAL" 
         ;;
      *)
         WKHTMLOPTS="$WKHTMLOPTS --css $CSSLOCAL"
         ;;
   esac
fi

# other stuff 

if [[ "$apperror" == "1" ]]
then
    case $pdfengine in
        "")
            echo "We need pandoc and wkhtmltopdf"
            echo "One or the other not found"
            ;;
        "docker")
            echo "We need pandoc and docker"
            echo "One or the other not found"
            ;;
        *)
            echo "We need pandoc and wkhtmltopdf"
            echo "One or the other not found"
            ;;
    esac
    case $os in
        Darwin)
            echo "Install Rstudio to get pandoc"
            if [[ "$pdfengine" == "" ]]
            then
                echo "Try: brew cask install wkhtmltopdf"
            elif [[ "$pdfengine" == "docker" ]]
            then
                echo "Try: brew install docker"
            fi
            ;;
        *)
            echo "Please install"
            ;;
    esac
    [[ "$nopdf" == "1" ]] || exit_on_error 2 "Required dependencies missing"
fi 

commitmsg="AEAREP-$num #comment $preapprove $extramsg"

## Test if we are where we think we should be

if [[ ! -d ".git" ]]
then 
   exit_on_error 2 Not in right directory
fi

if [[ ! -f "REPLICATION.md" ]]
then
   exit_on_error 2 Missing REPLICATION.md -required-
fi

# Only add checkboxes to lines with '-' that also contain 'REQUIRED' or 'SUGGESTED' and are not already checkboxes
if [[ -f "REPLICATION.md" ]]; then
  sed -i.bak -E '/^- *\[ \]/!{/^-.*(REQUIRED|SUGGESTED)/s/^(- *)/- [ ] /}' REPLICATION.md
fi

# If there is a line with "Automatically Generated Appendices", we remove it and everything after it.

tmpmain=$(mktemp)
tmpapp=$(mktemp)

cat REPLICATION.md > $tmpmain

if grep -q "Automatically Generated Appendices" $tmpmain
then
   sed  '/Automatically Generated Appendices/,$d' $tmpmain > $tmpapp
else
   cp $tmpmain $tmpapp
fi

# Fill in the appendix

python3 tools/replace_placeholders.py --infile ${template_app} --indir "generated" --outfile $appendix
git add $appendix

# Append the generated appendix to the base file
echo "" >> $tmpapp
cat $tmpapp $appendix > REPLICATION.md



# Update timestamp directly in REPLICATION.md
timestamp=$(date '+%B %d, %Y  %H:%M %Z')
# Remove any existing timestamp lines
sed -i '/^\*Report last created on.*\*$/d' REPLICATION.md
# Add new timestamp before "Some useful links:" line
sed -i "/^> Some useful links:/i\\
*Report last created on $timestamp*\\
\\
" REPLICATION.md 

# convert to PDF, just in case
# requires: wkhtmltopdf and pandoc

if [[ "$nopdf" == "0" ]]
then
   case $pdfengine in
      "")
         echo "Using pandoc to generate HTML, then wkhtmltopdf to generate PDF"
         outfile=REPLICATION.html
         PANDOCXTRA=""
         ;;
      "docker")
         echo "Using pandoc to generate HTML, then Docker to generate PDF"
         outfile=REPLICATION.html
         PANDOCXTRA=""
         ;;
      *)
         echo "Using pandoc and wkhtmltopdf to generate PDF"
         outfile=REPLICATION.pdf
         PANDOCXTRA="$WKHTMLOPTS"
         ;;
   esac
   $pandoc $PANDOCOPTS REPLICATION.md -f gfm -t html5 -o $outfile --metadata pagetitle="Report for AEAREP-$num" $PANDOCXTRA 
   exit_on_error $? "Pandoc failed to generate $outfile"
   # now generate the PDF
   if [[ "$pdfengine" == "" ]]
   then
      $wkhtmltopdf $WKHTMLOPTS $outfile REPLICATION.pdf
      exit_on_error $? "wkhtmltopdf failed to generate REPLICATION.pdf"
   elif [[ "$pdfengine" == "docker" ]]
   then
      echo "Preparing for Docker execution..."
      echo "Pulling latest Docker image..."
      $dockerbin pull $DOCKERIMG || echo  "Failed to pull Docker image $DOCKERIMG"
      # Set directory permissions to allow Docker (others) to access
      chmod o+rwx .
      chmod o+r .[a-z]*css
      chmod o+r REPLICATION.html
      # Remove any pre-existing REPLICATION.pdf
      rm -f REPLICATION.pdf
      $dockerbin run -it --rm --user 10042:999 -v $(pwd):/home/pptruser/project -w /home/pptruser/project $DOCKERIMG
      exit_on_error $? "Docker failed to generate REPLICATION.pdf"
   fi
else
   echo "Skipping PDF generation as requested"
fi

rm $CSSLOCAL
[[ -f $LOGOLOCAL ]] && rm $LOGOLOCAL
[[ -f REPLICATION.html ]] && rm REPLICATION.html

# No need to restore from backup - timestamp is now permanent in REPLICATION.md

echo "-------- Current git status -----------"
git status

echo "---------------------------------------"
git add REPLICATION.md
git add REPLICATION.pdf
if [[ -f "for openICPSR.md" ]]
then 
   # check for standard language in ICPSR file
   grep ScholarOne "for openICPSR.md" 1>/dev/null
   icpsr_check=$?
   case $icpsr_check in
      0)
      # tag is already in
      echo "ICPSR file is ready for addition"
      ;;
      *)
      # tag needs to be added
      echo "" >> "for openICPSR.md"
      echo "" >> "for openICPSR.md"
      echo "$ICPSRMSG" | sed "s/xxx/$num/" >> "for openICPSR.md"
      echo "---------------------------------------"
      cat "for openICPSR.md"
      echo "---------------------------------------"
      echo "::: Does this look fine?"
      read
      ;;
   esac
   git add "for openICPSR.md"
   commitmsg="$commitmsg with notes for openICPSR"
fi
echo "-------- Updated git status -----------"
git status

echo "::: Ready to commit/ push? "
echo "::: Msg:"
echo "    $commitmsg"
read
git commit -m "$commitmsg"
git push

# Now modify the Jira issue accordingly. Ask first, and then call jira_approval_manager.py
echo "::: Ready to update Jira issue AEAREP-$num ? (Ctrl-C to abort)"
read

# check first if the script is in the path
if ! command -v jira_approval_manager.py &> /dev/null
then
   echo "jira_approval_manager.py could not be found in PATH. Not modifying Jira issue."
   echo "You may want to call   aeaopen   ."
   exit 0
fi
set -evx
$pythonbin $(dirname $0)/jira_approval_manager.py aearep-$num $decision 0